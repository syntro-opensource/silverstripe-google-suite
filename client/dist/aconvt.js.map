{"version":3,"file":"aconvt.js","mappings":"YAQA,SAASA,EAAyBC,EAAOC,EAAIC,GACpB,iBAAXF,GACVG,QAAQC,MAAM,6BAEhB,IAAIC,EAASJ,EAWb,OAVKI,IAAQA,EAASC,OAAOC,sBAM7BC,KAAK,QAAS,aAAc,CAC1BC,QAAU,GAAEJ,KAAUL,IACtBU,eAPe,YACXR,QAAwB,IAATA,KACjBI,OAAOK,SAAWT,OAOf,EAsBT,SAASU,EAAcC,EAAWC,GAChC,MAAMC,EAAWC,SAASC,iBAAiBH,EAAWI,UACtD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAASK,OAAQD,GAAK,EAAG,CAC3C,MAAMjB,EAAMY,EAAWO,kBAhBFC,EAgBoCP,EAASI,IAfxDI,SAAW,CAAC,IAAK,KAAKC,SAASF,EAAQC,UAAYD,EAAQG,WAAWC,KACzEJ,EAAQG,WAAWC,KAAKC,MAE1B,MAaLZ,EAASI,GAAGS,iBAAiBf,GAAW,IAAMd,EAC5Ce,EAAWe,iBACXf,EAAWgB,cACX5B,KApBN,IAAyBoB,EAsCzBhB,OAAOyB,kBAVP,WACE,MAAMC,EAAe1B,OAAO2B,gBACtBC,EAAgB5B,OAAO6B,iBAC7B,IAAK,IAAIhB,EAAI,EAAGA,EAAIa,EAAaZ,OAAQD,GAAK,EAC5CP,EAAc,QAASoB,EAAab,IAEtC,IAAK,IAAIiB,EAAI,EAAGA,EAAIF,EAAcd,OAAQgB,GAAK,EAC7CxB,EAAc,SAAUsB,EAAcE,KAI1C9B,OAAOyB,oB","sources":["webpack://silverstripe-google-suite/./client/src/bundle.js"],"sourcesContent":["/**\n * broadcastConversionEvent - broadcast conversion event\n *\n * @param  {string} label the conversion label\n * @param  {string} id    the id of the ad account\n * @param  {string} url   the url posted to\n * @return {bool}\n */\nfunction broadcastConversionEvent(label, id, url) {\n  if (typeof (label) !== 'string') {\n    console.error('no conversion label given'); // eslint-disable-line no-console\n  }\n  let convId = id;\n  if (!convId) convId = window.ssgsuiteDefaultToken;\n  const callback = function callback() {\n    if (url || typeof (url) !== 'undefined') {\n      window.location = url;\n    }\n  };\n  gtag('event', 'conversion', { // eslint-disable-line no-undef\n    send_to: `${convId}/${label}`,\n    event_callback: callback,\n  });\n  return false;\n}\n\n/**\n * hrefFromElement - get the href for external links from the element\n *\n * @param  {Node} element the element in question\n * @return {null|string}\n */\nfunction hrefFromElement(element) {\n  if (element.tagName && ['a', 'A'].includes(element.tagName) && element.attributes.href) {\n    return element.attributes.href.value;\n  }\n  return null;\n}\n\n/**\n * appendClickHandler - appends a conversion event on the given event type\n *\n * @param  {string} eventName  the event to track\n * @param  {object} conversion the conversion from the config\n */\nfunction appendHandler(eventName, conversion) {\n  const elements = document.querySelectorAll(conversion.selector);\n  for (let i = 0; i < elements.length; i += 1) {\n    const url = conversion.conversion_url || hrefFromElement(elements[i]);\n    elements[i].addEventListener(eventName, () => broadcastConversionEvent(\n      conversion.conversion_label,\n      conversion.conversion_id,\n      url,\n    ));\n  }\n}\n\n/**\n * ssgsuiteTrackConv - activates the conversion tracking\n */\nfunction ssgsuiteTrackConv() {\n  const trackOnClick = window.ssgsuiteOnClick;\n  const trackOnSubmit = window.ssgsuiteOnSubmit;\n  for (let i = 0; i < trackOnClick.length; i += 1) {\n    appendHandler('click', trackOnClick[i]);\n  }\n  for (let j = 0; j < trackOnSubmit.length; j += 1) {\n    appendHandler('submit', trackOnSubmit[j]);\n  }\n}\nwindow.ssgsuiteTrackConv = ssgsuiteTrackConv;\nwindow.ssgsuiteTrackConv();\n"],"names":["broadcastConversionEvent","label","id","url","console","error","convId","window","ssgsuiteDefaultToken","gtag","send_to","event_callback","location","appendHandler","eventName","conversion","elements","document","querySelectorAll","selector","i","length","conversion_url","element","tagName","includes","attributes","href","value","addEventListener","conversion_label","conversion_id","ssgsuiteTrackConv","trackOnClick","ssgsuiteOnClick","trackOnSubmit","ssgsuiteOnSubmit","j"],"sourceRoot":""}